// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hypervolume_t
// Main runtime
Rcpp::DataFrame hypervolume_t(Rcpp::DataFrame data, float dist_barycenter, float dist_sparsify);
RcppExport SEXP _hvt_hypervolume_t(SEXP dataSEXP, SEXP dist_barycenterSEXP, SEXP dist_sparsifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< float >::type dist_barycenter(dist_barycenterSEXP);
    Rcpp::traits::input_parameter< float >::type dist_sparsify(dist_sparsifySEXP);
    rcpp_result_gen = Rcpp::wrap(hypervolume_t(data, dist_barycenter, dist_sparsify));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hvt_hypervolume_t", (DL_FUNC) &_hvt_hypervolume_t, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_hvt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
